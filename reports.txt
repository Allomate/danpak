Reporting:

1- MTD Sale Amount:
SELECT SUM(final_price) from order_contents
where order_id IN (SELECT id FROM `orders` where MONTH(created_at) = 7 and LOWER(status) = 'completed')

2- Sales Target achievement:
Delayed as asked by Wakas Bhai

3- Target Deficit (Amount) - To a specific employee:
Delayed as asked by Wakas Bhai

4- Projected MTD Sales (For Current Month):
    My Formula
    a- Daily Average Sales (My Formula):
    SELECT ROUND((SELECT SUM(final_price) from order_contents where find_in_set(order_id, GROUP_CONCAT(orders.id)))) as avg_sale FROM `orders`
    where MONTH(created_at) = 7
    and LOWER(status) = "completed"
    group by DAY(created_at)
    
    Wakas Bhai formula
    Achieved Sales Amount + (daily average sales (Achieved Sales amount / No of days passed in the month) * number of remaining working days)
    b- i)- Number of remaining Working Days:
    SELECT (DAY(LAST_DAY(created_at)))-DAY(DATE(created_at)) as remaining_days from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
    group by DATE(created_at)
    order by DATE(created_at) desc
    LIMIT 1 = 7

    ii)- No Of Days Passed in the month:
    SELECT DAY(DATE(created_at)) as passed_days from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
    group by DATE(created_at)
    order by DATE(created_at) desc
    LIMIT 1 = 24
    
    iii)- Achieved Sales Amount:
    SELECT ROUND(SUM(final_price)) as achieved_sales from order_contents
    where order_id IN (SELECT id from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
    and DAY(DATE(created_at)) <= (SELECT DAY(DATE(created_at)) as passed_days from orders
        where LOWER(status) = "completed"
        and MONTH(created_at) = 7
        group by DATE(created_at)
        order by DATE(created_at) desc
        LIMIT 1)) = 375758

    iv)- Final Result:
    SELECT (SELECT ROUND(SUM(final_price)) as achieved_sales from order_contents
    where order_id IN (SELECT id from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
    and DAY(DATE(created_at)) <= (SELECT DAY(DATE(created_at)) as passed_days from orders
        where LOWER(status) = "completed"
        and MONTH(created_at) = 7
        group by DATE(created_at)
        order by DATE(created_at) desc
        LIMIT 1)
    order by DATE(created_at)))+(((SELECT ROUND(SUM(final_price)) as achieved_sales from order_contents
    where order_id IN (SELECT id from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
    and DAY(DATE(created_at)) <= (SELECT DAY(DATE(created_at)) as passed_days from orders
        where LOWER(status) = "completed"
        and MONTH(created_at) = 7
        group by DATE(created_at)
        order by DATE(created_at) desc
        LIMIT 1)
    order by DATE(created_at)))/(SELECT DAY(DATE(created_at)) as passed_days from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
    group by DATE(created_at)
    order by DATE(created_at) desc
    LIMIT 1)) * (SELECT (DAY(LAST_DAY(created_at)))-DAY(DATE(created_at)) as remaining_days from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
    group by DATE(created_at)
    order by DATE(created_at) desc
    LIMIT 1)) as projected_mtd_sales
    
5- Gross Margin (percentage):
    SELECT (ROUND((final_price/item_quantity_booker))/(SELECT item_warehouse_price from inventory_preferences where pref_id = oc.pref_id)) as gross_margin from order_contents oc
    where order_id IN (SELECT id from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7)

6- Profit:
    SELECT (ROUND((final_price/item_quantity_booker))-(SELECT item_warehouse_price from inventory_preferences where pref_id = oc.pref_id)) as profit from order_contents oc
    where order_id IN (SELECT id from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7)

7- Avg Daily Sale:
    SELECT DATE(created_at) as date, ROUND((SELECT SUM(final_price) from order_contents where find_in_set(order_id, GROUP_CONCAT(orders.id)))) as avg_sale from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
        group by DAY(created_at)

8- High Selling Days:
    SELECT DAYNAME(created_at) as day, ROUND((SELECT SUM(final_price) from order_contents where find_in_set(order_id, GROUP_CONCAT(orders.id)))) as avg_sale from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
        group by DAY(created_at)
        order by avg_sale desc

9- Top 10 Employees:
    SELECT (SELECT CONCAT(ei.employee_first_name, " ", ei.employee_last_name) from employees_info ei where ei.employee_id = orders.employee_id) as employee, ROUND((SELECT SUM(final_price) from order_contents where find_in_set(order_id, GROUP_CONCAT(orders.id)))) as total_sale from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
        group by booking_territory
        order by total_sale desc
        LIMIT 0, 10

10- Top 10 Territories:
    SELECT (SELECT tm.territory_name from territory_management tm where tm.id = orders.booking_territory) as territory, ROUND((SELECT SUM(final_price) from order_contents where find_in_set(order_id, GROUP_CONCAT(orders.id)))) as total_sale from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
        group by booking_territory
        order by total_sale desc
        LIMIT 0, 10

11- Top 10 Products:
    SELECT CONCAT((SELECT item_name from inventory_items where item_id = (SELECT item_id from inventory_preferences where pref_id = oc.pref_id)), " (", (SELECT unit_name from inventory_types_units where unit_id = (SELECT unit_id from inventory_preferences where pref_id = oc.pref_id)), ")") as product, item_quantity_booker, ROUND(((item_quantity_booker/(SELECT SUM(item_quantity_booker) as total_quantities
        from ((SELECT item_quantity_booker FROM `order_contents` oc order by item_quantity_booker desc LIMIT 0,5)) as sumed))*100), 2) as percent_value FROM `order_contents` oc where order_id IN (SELECT id from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7) order by item_quantity_booker desc LIMIT 0,10

12- Top 10 Retailers:
    SELECT (SELECT rd.retailer_name from retailers_details rd where rd.id = orders.retailer_id) as retailer, ROUND((SELECT SUM(final_price) from order_contents where find_in_set(order_id, GROUP_CONCAT(orders.id)))) as total_sale from orders
    where LOWER(status) = "completed"
    and MONTH(created_at) = 7
        group by retailer_id
        order by total_sale desc
        LIMIT 0, 10

13. Order Bookers Ranking:
    Report#3 of top 10 employees and this report are same, as wakas bhai described. So consultation required

14- Regular Vs Discounted Product Sales %:
SELECT (((SELECT count(*) as total_products_on_reg_price from (SELECT final_price, ((SELECT ip.item_trade_price from inventory_preferences ip where ip.pref_id = oc.pref_id)*oc.item_quantity_booker) as sold_price, (case when (final_price = ((SELECT ip.item_trade_price from inventory_preferences ip where ip.pref_id = oc.pref_id)*oc.item_quantity_booker)) THEN "Reg Price" ELSE "Disc Price" END) reg_or_disc FROM `order_contents` oc
where oc.pref_id IN (SELECT pref_id from inventory_preferences)
and (case when (final_price = ((SELECT ip.item_trade_price from inventory_preferences ip where ip.pref_id = oc.pref_id)*oc.item_quantity_booker)) THEN "Reg Price" ELSE "Disc Price" END) = "Reg Price") as test) / (SELECT count(*) as total_products_sold from (SELECT final_price, ((SELECT ip.item_trade_price from inventory_preferences ip where ip.pref_id = oc.pref_id)*oc.item_quantity_booker) as sold_price, (case when (final_price = ((SELECT ip.item_trade_price from inventory_preferences ip where ip.pref_id = oc.pref_id)*oc.item_quantity_booker)) THEN "Reg Price" ELSE "Disc Price" END) reg_or_disc FROM `order_contents` oc
where oc.pref_id IN (SELECT pref_id from inventory_preferences)) as test))*100) as result